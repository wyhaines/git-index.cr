{"repository_name":"git-index","body":"# git-index\n\n![Git-Index CI](https://img.shields.io/github/workflow/status/wyhaines/git-index.cr/Git-Index%20CI?style=for-the-badge&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/git-index.cr.svg?style=for-the-badge)](https://github.com/wyhaines/git-index.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/git-index.cr/latest?style=for-the-badge)\n\nThis tool takes a list of paths and checks them for git repositories. It writes to a sqlite database a table of repositories found, indexed by both the first and the second commit hashes on the repository. The rationale is that these first couple of commits are unlikely to ever change as the result of a rebase, and thus make a fairly reliable fingerprint of the identity of the repository. The motivation behind this tool is for use with  Serf and the `serf-hander` gem or the `serf-handler.cr` crystal implementation to power a slick, simple deployment manger utizing a git repo and deploy hooks at the underlying source and trigger.\n\n# Building It\n\nIf you have crystal installed on your system, you can build the\nbinary for git-index with:\n\n```crystal\nshards build -p -s -t --release\n```\n\nIf you want to build a statically linked binary (which is better for distribution to other systems):\n\n```crystal\nshards build -p -s -t --release --static\n```\n\nIn either case, the compiled binary will be found as `bin/git-index`.\n\n## Usage\n\n```\ngit-index /gluster/htdocs/site.doc.com\n```\n\nAdd the given directory to the index.\n\n```\ngit-index -l\n```\n\nList all of the indexed hashes and their directories\n\n```\ngit-index -q d950c4bbe672fe02e36009d71d88ef4ab754fa91\n```\n\nPerform a lookup in the index to see if that has code matches a known repository, and returns the matches, one per line.\n\n```\ngit-index -h\n```\n\nSee all options.\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/git-index.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/git-index.cr?style=for-the-badge)","program":{"html_id":"git-index/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"git-index","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"git-index/GitIndex","path":"GitIndex.html","kind":"struct","full_name":"GitIndex","name":"GitIndex","abstract":false,"superclass":{"html_id":"git-index/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"git-index/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"git-index/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"git-index/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/git-index.cr","line_number":6,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L6"},{"filename":"src/git-index/config.cr","line_number":3,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index/config.cr#L3"},{"filename":"src/git-index/version.cr","line_number":1,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index/version.cr#L1"}],"repository_name":"git-index","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.3\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(config:Hash(String,Bool|String|Symbol)=Config.parse_command_line)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"config","doc":null,"default_value":"Config.parse_command_line","external_name":"config","restriction":"Hash(String, Bool | String | Symbol)"}],"args_string":"(config : Hash(String, Bool | String | Symbol) = Config.parse_command_line)","args_html":"(config : Hash(String, Bool | String | Symbol) = <span class=\"t\">Config</span>.parse_command_line)","location":{"filename":"src/git-index.cr","line_number":13,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L13"},"def":{"name":"new","args":[{"name":"config","doc":null,"default_value":"Config.parse_command_line","external_name":"config","restriction":"Hash(String, Bool | String | Symbol)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"database-instance-method","name":"database","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/git-index.cr","line_number":34,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L34"},"def":{"name":"database","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"db = DB.open(@config[\"database\"].to_s)\nbegin\n  db.query(\"select 1 from repositories\") do |_row|\n    break\n  end\nrescue\n  db.exec(\"create table repositories (\\n  hash varchar(160),\\n    path varchar(250),\\n      url varchar(250)\\n)\")\nend\ndb\n"}},{"html_id":"delete_records(db)-instance-method","name":"delete_records","doc":null,"summary":null,"abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"args_string":"(db)","args_html":"(db)","location":{"filename":"src/git-index.cr","line_number":92,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L92"},"def":{"name":"delete_records","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processed = [] of Array(String)\nARGV.each do |path_or_hash|\n  (query_records(db, [path_or_hash])).each do |r|\n    processed << r\n  end\n  if !(URI.parse(path_or_hash)).scheme.nil?\n    if @config[\"verbose\"]\n      puts(\"deleting url #{path_or_hash}\")\n    end\n    if @config[\"dryrun\"]\n    else\n      db.exec(\"DELETE from repositories WHERE url = ?\", path_or_hash)\n    end\n  else\n    if File.exists?(File.expand_path(path_or_hash))\n      path_or_hash = File.expand_path(path_or_hash)\n      if @config[\"verbose\"]\n        puts(\"deleting path #{path_or_hash}\")\n      end\n      if @config[\"dryrun\"]\n      else\n        db.exec(\"DELETE FROM repositories WHERE path = ?\", path_or_hash)\n      end\n    else\n      if @config[\"verbose\"]\n        puts(\"deleting hashes like #{path_or_hash}\")\n      end\n      if @config[\"dryrun\"]\n      else\n        db.exec(\"DELETE FROM repositories where hash like ?\", \"#{path_or_hash}%\")\n      end\n    end\n  end\nend\nprocessed\n"}},{"html_id":"git_directories-instance-method","name":"git_directories","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/git-index.cr","line_number":54,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L54"},"def":{"name":"git_directories","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @config[\"recurse\"]\n  untrimmed_directories = [] of String\n  ARGV.each do |base_path|\n    Find.find(base_path) do |path|\n      if path.includes?(\".git\")\n        Find.prune\n      end\n      if File.directory?(path)\n      else\n        Find.prune\n      end\n      if system(\"git -C #{File.join(path, \"..\")} rev-parse --is-inside-work-tree > /dev/null 2>&1\")\n        Find.prune\n      end\n      untrimmed_directories << (File.expand_path(path))\n    end\n  end\nelse\n  untrimmed_directories = ARGV\nend\nuntrimmed_directories.select do |dir|\n  system(\"git -C #{dir} rev-parse --is-inside-work-tree > /dev/null 2>&1\")\nend\n"}},{"html_id":"index_git_repositories(db,dirs)-instance-method","name":"index_git_repositories","doc":null,"summary":null,"abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""},{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":""}],"args_string":"(db, dirs)","args_html":"(db, dirs)","location":{"filename":"src/git-index.cr","line_number":74,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L74"},"def":{"name":"index_git_repositories","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""},{"name":"dirs","doc":null,"default_value":"","external_name":"dirs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processed = [] of Array(String)\ndirs.each do |dir|\n  codes = (`git -C #{dir} rev-list --parents HEAD | tail -2`).split(\"\\n\")\n  remote = (`git -C #{dir} config --get remote.origin.url`).strip\n  hash = codes.size > 1 ? codes.first : codes.last\n  if hash =~ (/^([\\w\\d]+)\\s+([\\w\\d]+)$/)\n    hash = \"#{$~[2]}#{$~[1]}\"\n  end\n  processed << [hash, File.expand_path(dir), remote]\n  if @config[\"dryrun\"]\n  else\n    db.exec(\"INSERT INTO repositories (hash, path, url) VALUES (?, ?, ?)\", hash, File.expand_path(dir), remote)\n  end\n  if @config[\"verbose\"]\n    puts(\"#{hash} -> #{File.expand_path(dir)}\")\n  end\nend\nprocessed\n"}},{"html_id":"list_records(db)-instance-method","name":"list_records","doc":null,"summary":null,"abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"args_string":"(db)","args_html":"(db)","location":{"filename":"src/git-index.cr","line_number":111,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L111"},"def":{"name":"list_records","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"puts(\"hash,path,url\")\nprocessed = [] of Array(String)\ndb.query(\"SELECT hash, path, url FROM repositories\") do |rs|\n  rs.each do\n    result = [rs.read(String), rs.read(String), rs.read(String)]\n    processed << result\n    puts(result.join(\",\"))\n  end\nend\nprocessed\n"}},{"html_id":"query_records(db,argv=ARGV)-instance-method","name":"query_records","doc":null,"summary":null,"abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""},{"name":"argv","doc":null,"default_value":"ARGV","external_name":"argv","restriction":""}],"args_string":"(db, argv = ARGV)","args_html":"(db, argv = <span class=\"t\">ARGV</span>)","location":{"filename":"src/git-index.cr","line_number":124,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L124"},"def":{"name":"query_records","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""},{"name":"argv","doc":null,"default_value":"ARGV","external_name":"argv","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processed = [] of Array(String)\nargv.each do |hash_or_url|\n  db.query(\"SELECT hash, path, url from repositories WHERE hash like ? or url like ? or path like ?\", \"#{hash_or_url}%\", \"%#{hash_or_url}%\", \"%#{hash_or_url}%\") do |rs|\n    rs.each do\n      result = [rs.read(String), rs.read(String), rs.read(String)]\n      processed << result\n      puts(\"#{result[0]}: #{result[1]}|#{result[2]}\")\n    end\n  end\nend\nprocessed\n"}},{"html_id":"run-instance-method","name":"run","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/git-index.cr","line_number":18,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index.cr#L18"},"def":{"name":"run","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  db = database\n  case @config[\"command\"]\n  when :delete\n    delete_records(db)\n  when :insert\n    index_git_repositories(db, git_directories)\n  when :list\n    list_records(db)\n  when :query\n    query_records(db)\n  end\nensure\n  if !db.nil?\n    db.close\n  end\nend"}}],"macros":[],"types":[{"html_id":"git-index/GitIndex/Config","path":"GitIndex/Config.html","kind":"module","full_name":"GitIndex::Config","name":"Config","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/git-index/config.cr","line_number":4,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index/config.cr#L4"}],"repository_name":"git-index","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"git-index/GitIndex","kind":"struct","full_name":"GitIndex","name":"GitIndex"},"doc":null,"summary":null,"class_methods":[{"html_id":"parse_command_line-class-method","name":"parse_command_line","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/git-index/config.cr","line_number":5,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index/config.cr#L5"},"def":{"name":"parse_command_line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"config = Hash(String, Bool | String | Symbol).new\n{\"database\" => \"sqlite3://#{ENV[\"HOME\"]}/.git-index.db\", \"recurse\" => false, \"verbose\" => false, \"dryrun\" => false}.each do |k, v|\n  config[k] = v\nend\n_commands = [] of Symbol\noptions = OptionParser.new do |opts|\n  opts.banner = \"Usage: git-index [OPTIONS] PATH1 PATH2 PATHn\\n\\nThis tool takes one or more paths and checks them for the presence of a git repository. If one exists, it writes a record into the database of the first and second commit hashes of the repository and the path to the repository.\"\n  opts.separator(\"\")\n  opts.on(\"-d\", \"--database [PATH]\", \"The database file to write to. Defaults to $HOME/.git-index.db\") do |path|\n    config[\"database\"] = \"sqlite3://#{path}\"\n  end\n  opts.on(\"-r\", \"--recurse\", \"Recursively search through the provided directories for git repositories.\") do\n    config[\"recurse\"] = true\n  end\n  opts.on(\"-l\", \"--list\", \"List the known repositories\") do\n    _commands << (:list)\n  end\n  opts.on(\"-q\", \"--query\", \"The command line arguments are assumed to be hashes to query for in the database. Matches will be returned, one per line, in the same order the hashes appear on the command line.\") do |_hash|\n    _commands << (:query)\n  end\n  opts.on(\"-x\", \"--delete\", \"The command line arguments are assumed to be hashes or paths to delete from the databse.\") do\n    _commands << (:delete)\n  end\n  opts.on(\"-i\", \"--insert\", \"The command line arguments are assumed to be paths to check for git repositories. This is the default mode of operation.\") do\n    _commands << (:insert)\n  end\n  opts.on(\"-v\", \"--verbose\", \"Provide extra output about actions\") do\n    config[\"verbose\"] = true\n  end\n  opts.on(\"-n\", \"--dry-run\", \"Find git repositories, but do not actually store them in the database. This option doesn't do much without also specifying --verbose.\") do\n    config[\"dryrun\"] = true\n  end\n  opts.on(\"-h\", \"--help\", \"Show this help\") do\n  end\n  opts.on(\"--version\", \"Output #{version_string}\") do\n    puts(version_string)\n    exit\n  end\nend\noptions.parse\nif _commands.size > 1\n  raise(ArgumentError.new(\"Specify only a single command mode (-l, -q, -d, -i)\"))\nelse\n  if !_commands.empty?\n    config[\"command\"] = _commands.first\n  else\n    if !ARGV.empty?\n      config[\"command\"] = :insert\n    else\n      config[\"command\"] = :noop\n      puts(options)\n    end\n  end\nend\nconfig\n"}},{"html_id":"version_string-class-method","name":"version_string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/git-index/config.cr","line_number":75,"url":"https://github.com/wyhaines/git-index.cr/blob/2fea49234a001752635c7dfe860a5b39fe9e2240/src/git-index/config.cr#L75"},"def":{"name":"version_string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"git-index v#{GitIndex::VERSION}-crystal\""}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}